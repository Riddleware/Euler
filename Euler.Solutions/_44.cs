using System;
using System.Collections.Generic;
using System.Threading;
using Euler.Lib;

namespace Euler.Solutions
{
    // Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
    //
    // 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    //
    // It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
    //
    // Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
    // and D = |Pk − Pj| is minimised; what is the value of D?
    public class _44 : ISolution<int, long>
    {
        bool IsValid(long p1, long p2, List<long> ps)
        {
            return ps.Contains(p1 + p2) && (ps.Contains(p1 - p2)||ps.Contains(p2 - p1));
        }

        public long Run(int x)
        {
            long res = 0;

            List<long> pentagonals = Utils.GetPentagonals(2400);

            long idx = 0;
            foreach (var p1 in pentagonals)
            {
                foreach (var p2 in pentagonals)
                {
                    if (IsValid(p1, p2, pentagonals))
                    {
                        // Console.WriteLine($"{p1}:{p2} VALID!!!!   {p1-p2}   {p2-p1}");
                        return Math.Abs(p1 - p2);
                    }
                }
            }

            return res;
        }
    }
}